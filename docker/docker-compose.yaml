version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_REPLICATION_FACTOR: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    healthcheck:
      test: nc -zv kafka1 9092 || exit 1
      interval: 10s
      retries: 25
      start_period: 10s

  kafka2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_REPLICATION_FACTOR: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    healthcheck:
      test: nc -zv kafka2 9092 || exit 1
      interval: 10s
      retries: 25
      start_period: 20s

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8081:8081"
    volumes:
      - type: bind
        source: "./clientConfig"
        target: /clientConfig
        read_only: true
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9092
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
    healthcheck:
      test: nc -zv localhost 8888 || exit 1

  gateway:
    image: conduktor/conduktor-proxy:1.8.2.1-amd64
    hostname: gateway
    container_name: gateway
    # Compose implementations SHOULD always pull the image from the registry. Remove this if we stick to a particular version.
    pull_policy: always
    ports:
      - "8888:8888"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9092
      KAFKA_SEND_BUFFER_BYTES: 1300000
      KAFKA_RECEIVE_BUFFER_BYTES: 1300000
      AUTHENTICATION_AUTHENTICATOR_TYPE: SASL_PLAIN
      USER_POOL_TYPE: JWT
      USER_POOL_SECRET_KEY: OaM4lG+xO5Gz10GB1apZ2XDUuWw/sK1H+XXcgExpYm2YEHgnvEf63q9TJraebD3SQb/JzefcZkUEKz/8V5V+Fg==
      PROXY_HOST: gateway
      SCHEMA_REGISTRY_HOST: http://schema-registry:8081
      FEATURE_FLAGS_JWT_TOKEN_ENDPOINT: true
      FEATURE_FLAGS_AUDIT: true
      FEATURE_FLAGS_CACHING: false
      ADMIN_API_USERS: "[{username: superUser, password: superUser, admin: true}]"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy

  kafka-client:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-client
    container_name: kafka-client
    command: sleep infinity
    volumes:
      - type: bind
        source: "./clientConfig"
        target: /clientConfig
        read_only: true

  # minio:
  #   image: quay.io/minio/minio
  #   hostname: minio
  #   container_name: minio
  #   command: minio server /data
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     MINIO_SERVER_HOST: minio
  #     MINIO_ROOT_USER: minio
  #     MINIO_ROOT_PASSWORD: minio123
  #     MINIO_SITE_REGION: eu-south-1

  # aws-cli:
  #   hostname: aws-cli
  #   container_name: aws-cli
  #   image: amazon/aws-cli
  #   entrypoint: "sleep 100d"